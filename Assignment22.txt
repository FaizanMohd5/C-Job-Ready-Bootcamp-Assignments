Assignment - 22 A Job Ready Bootcamp in C++, DSA and IOT MySirG

DMA

1. Define a function to input variable length string and store it in an array without
memory wastage.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    char *str,c;
    int i=0,j=1;
    str=(char *)malloc(sizeof(char));
    if(str==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    printf("Enter the string: ");
    while(c!='\n')
    {
        c=getc(stdin);
        j++;
        str=(char *)realloc(str,j*sizeof(char));
        str[i]=c;
        i++;
    }
    str[i]='\0';
    printf("Entered string is %s\n",str);
    return 0;
}

2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int i,n,total=0;
    float avg=0;
    int *p;
    printf("Enter number of data value you want to store:");
    scanf("%d",&n);
    printf("Enter data values:\n");
    p=(int *)malloc(sizeof(int)*n);
    if(p==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    for(i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    for(i=0;i<n;i++)
    {
        total=total+*(p+i);
    }
    free(p);	
    avg=total/n;
    printf("Average is %.2f",avg);
    return 0;
}

3. Write a program to calculate the sum of n numbers entered by the user using malloc
and free.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int i,n,total=0;
    int *p;
    printf("Enter number of data value you want to store:");
    scanf("%d",&n);
    printf("Enter data values:\n");
    p=(int *)malloc(sizeof(int)*n);
    if(p==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    for(i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    for(i=0;i<n;i++)
    {
        total=total+*(p+i);
    }
    free(p);
    printf("Sum is %d",total);
    return 0;
}

4. Write a program to input and print text using dynamic memory allocation.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    char *str,ch;
    int i=0,j=1;
    str=(char *)malloc(sizeof(char));
    if(str == NULL)
    {
        printf("Memomry allocation failed\n");
        return 0;
    }
    printf("Enter text: ");
    while(ch!='\n')
    {
        ch=getc(stdin);
        j++;
        str=(char*)realloc(str,j*sizeof(char));
        str[i]=ch;
        i++;
    }
    str[i]='\0';
    printf("\nText is %s\n",str);
    free(str);
    return 0;
}

5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int *a;
    int n,i,sum=0;
    printf("Enter size of array: ");
    scanf("%d",&n);
    a=(int *)calloc(n,sizeof(int));
    if(a==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    printf("Enter values: \n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        sum=sum+a[i];
    }
    printf("\nSum is %d",sum);
    free(a);
    return 0;
}

6. Write a program in C to find the largest element using Dynamic Memory Allocation.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int n,i,max;
    printf("Enter size of array: ");
    scanf("%d",&n);
    int *p;
    p=(int *)calloc(n,sizeof(int));
    if(p==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    printf("Enter the elements:\n");
    for(i=0;i<n;i++)
        scanf("%d",&p[i]);
    max=p[0];
    for(i=0;i<n-1;i++)
    {
        if(p[i+1]>max)
            max=p[i+1];
    }
    printf("largest = %d",max);
    return 0;
}

7. Write a program to demonstrate memory leak in C.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    void createVar()
    {
        int *p;
        p=malloc(sizeof(int));
        if(p==NULL)
        {
            printf("memory not allocated\n");
        }
        *p=9;
    }
    printf("\ndone\n");
    free(p);
    return 0;
}

8. Write a program to demonstrate dangling pointers in C.
ans)
#include<stdio.h>
#include<stdlib.h>
int *f1()
{
    int a=0;
    return &a;
}
int main()
{
    int *p;
    p=f1();
    printf("%d",*p);
    return 0;
}


9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int n;
    printf("Enter bytes of memory to be allocated: ");
    scanf("%d",&n);
    int *p;
    p=(int *)calloc(n/sizeof(int),sizeof(int));
    if(p==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    printf("%d int blocks allocated\n",n/sizeof(int));
    return 0;
}

10. Find out the maximum and minimum from an array using dynamic memory allocation
in C.
ans)
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int n,i,max,min;
    printf("Enter size of array: ");
    scanf("%d",&n);
    int *p;
    p=(int *)calloc(n,sizeof(int));
    if(p==NULL)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    printf("Enter the elements:\n");
    for(i=0;i<n;i++)
        scanf("%d",&p[i]);
    max=p[0];
    min=p[0];
    for(i=0;i<n-1;i++)
    {
        if(p[i+1]>max)
            max=p[i+1];
        if(p[i+1]<min)
            min=p[i+1];
    }
    printf("Maximum = %d\nMinimum = %d\n",max,min);
    return 0;
}
